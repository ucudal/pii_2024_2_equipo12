<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Ucu.Poo.DiscordBot.Commands.AvailableItemsCommand">
            <summary>
            Esta clase implementa el comando 'availableItems' del bot. Este comando le permite al usuario
            ver los items disponibles para usar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.AvailableItemsCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'availableItems'. Este comando le permite al usuario
            ver los items disponibles para usar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.BattleCommand">
            <summary>
            Esta clase implementa el comando 'battle' del bot. Este comando une al
            jugador que envía el mensaje con el oponente que se recibe como parámetro,
            si lo hubiera, en una batalla; si no se recibe un oponente, lo une con
            cualquiera que esté esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.BattleCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'battle'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.CatalogueCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'selectPokemon'. Este comando permite al usuario
            visualizar el catalogo pokemon en pantalla.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.AttackCommand">
            <summary>
            Esta clase implementa el comando 'attackPokemon' del bot. Este comando le permite al usuario
            atacar a un pokemon enemigo.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.AttackCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'attackPokemon'. Este comando le permite al usuario
            atacar a un pokemon enemigo.
            En el caso de que el enemigo no le queden pokemon, entonces el jugador
            ganó y se hace display del mensaje correspondiente junto con una imagen ubicada en Assets.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.ChangePokemonCommand">
            <summary>
            Esta clase implementa el comando 'changepokemon' del bot. Este comando permite
            al jugador cambiar su Pokémon actual por otro de los seleccionados.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.ChangePokemonCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'changepokemon'. Este comando permite al jugador
            cambiar su Pokémon actual por otro de los seleccionados.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.UseInitialPokemonCommand">
            <summary>
            Comando para seleccionar el primer Pokémon para batallar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.UseInitialPokemonCommand.ExecuteAsync(System.String)">
            <summary>
            Ejecuta el comando para seleccionar un Pokémon.
            </summary>
            <param name="pokemonName">El nombre del Pokémon a seleccionar para la batalla.</param>
            <returns>Una tarea asincrónica que se completa cuando el comando se ha ejecutado.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.UsePotionCommand">
            <summary>
            Esta clase implementa el comando 'usePotion' del bot. Este comando le permite al usuario
            usar un item en un pokemon luego de pasar los chequeos necesarios.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.UsePotionCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'usePotion'. Este comando le permite al usuario
            usar un item en un pokemon luego de pasar los chequeos necesarios.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.SelectPokemonCommand">
            <summary>
            Esta clase implementa el comando 'selectpokemon' del bot. Este comando permite
            al jugador seleccionar hasta 6 Pokémon del catálogo utilizando sus índices.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.SelectPokemonCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'selectpokemon'. Este comando permite al jugador
            seleccionar hasta 6 Pokémon del catálogo utilizando sus índices.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.CommandsCommand">
            <summary>
            Esta clase implementa el comando 'comand' del bot. Este comando le muestra
            al usuario un listado con los comandos.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.CommandsCommand.ExecuteAsync">
            <summary>
            Esta clase implementa el comando 'comand' del bot. Este comando le muestra
            al usuario un listado con los comandos.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.PokemonNameCommand">
            <summary>
            Esta clase implementa el comando 'name' del bot. Este comando retorna el
            nombre de un Pokémon dado su identificador.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.PokemonNameCommand.#ctor(Microsoft.Extensions.Logging.ILogger{Ucu.Poo.DiscordBot.Commands.PokemonNameCommand})">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:Ucu.Poo.DiscordBot.Commands.PokemonNameCommand"/> con los valores recibidos como
            argumento.
            </summary>
            <param name="logger">El servicio de logging a utilizar.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.PokemonNameCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'name'. Este comando retorna el nombre de un
            Pokémon dado su identificador.
            </summary>
            <param name="id">El identificador del Pokémon a buscar.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.UserInfoCommand">
            <summary>
            Esta clase implementa el comando 'userinfo', alias 'who' o 'whois' del bot.
            Este comando retorna información sobre el usuario que envía el mensaje o sobre
            otro usuario si se incluye como parámetro..
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.UserInfoCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'userinfo', alias 'who' o 'whois' del bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord a buscar.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.JoinCommand">
            <summary>
            Esta clase implementa el comando 'join' del bot. Este comando une al jugador
            que envía el mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.JoinCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'join'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.LeaveCommand">
            <summary>
            Esta clase implementa el comando 'leave' del bot. Este comando remueve el
            jugador que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.LeaveCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'leave' del bot. Este comando remueve el jugador
            que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.PlayersWaitingCommand">
            <summary>
            Esta clase implementa el comando 'playersWaitingList' del bot. Este comando muestra
            la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.PlayersWaitingCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'playersWaitingList'. Este comando muestra la lista de
            jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.StillWaitingCommand">
            <summary>
            Esta clase implementa el comando 'stillWaiting' del bot. Este comando le muestra
            al usuario si él esta esperando para jugar, es decir, si esta dentro de la Waitlist.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.StillWaitingCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'stillWaiting'. Este comando le muestra al usuario si él
            esta esperando para jugar, es decir, si esta dentro de la Waitlist.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Battle">
            <summary>
            Esta clase representa una batalla entre dos jugadores.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Player1">
            <summary>
            Obtiene un valor que representa el primer jugador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Player2">
            <summary>
            Obtiene un valor que representa al oponente.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.State">
            <summary>
            Obtiene o establece el estado de la batalla.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Turn">
            <summary>
            Representa a quien le corresponde el turno actual, determinándose random al inicio de la batalla.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.ActualTurn">
            <summary>
            Contador del turno actual.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.BattleStarted">
            <summary>
            Booleano que se vuelve true cuando los dos entrenadores tienen los pokemones suficientes para la batalla.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Battle.#ctor(Ucu.Poo.DiscordBot.Domain.Trainer,Ucu.Poo.DiscordBot.Domain.Trainer)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Battle"/> con los
            valores recibidos como argumento.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Battle.StartBattle">
             <summary>
             Inicia la batalla.
             </summary>
            
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Battle.EndBattle">
            <summary>
            Determina el ganador de la batalla.
            </summary>
            <returns>El nombre del jugador ganador.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.BattlesList">
            <summary>
            Esta clase representa la lista de batallas en curso.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.BattlesList.AddBattle(Ucu.Poo.DiscordBot.Domain.Trainer,Ucu.Poo.DiscordBot.Domain.Trainer)">
            <summary>
            Crea una nueva batalla entre dos jugadores.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
            <returns>La batalla creada.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.BattlesList.GetPlayerInBattle(System.String)">
            <summary>
            Funcion para conseguir el entrenador asociado al playerDisplayName
            Lo busca en las batallas y de no encontrarlo devuelve null
            </summary>
            <returns>Entrenador asociado al playerDisplayName.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Facade">
            <summary>
            Esta clase actúa como fachada para manejar las acciones relacionadas con las batallas Pokémon y la lista de espera. 
            Es un singleton y se utiliza para desacoplar la lógica del dominio del resto de las clases.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Facade.Instance">
            <summary>
            Obtiene la única instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Facade"/>.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetBattlesList">
            <summary>
            Obtiene la lista de batallas activas.
            </summary>
            <returns>Una instancia de <see cref="P:Ucu.Poo.DiscordBot.Domain.Facade.BattlesList"/> con las batallas actuales.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.Reset">
            <summary>
            Resetea la instancia del singleton. Solo debe usarse en los tests.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.AddTrainerToWaitingList(System.String)">
            <summary>
            Agrega un entrenador a la lista de espera.
            </summary>
            <param name="displayName">El nombre del entrenador.</param>
            <returns>Un mensaje indicando el resultado de la operación.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.RemoveTrainerFromWaitingList(System.String)">
            <summary>
            Remueve un entrenador de la lista de espera.
            </summary>
            <param name="displayName">El nombre del entrenador a remover.</param>
            <returns>Un mensaje indicando el resultado de la operación.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetAllTrainersWaiting">
            <summary>
            Obtiene una lista de todos los entrenadores en espera.
            </summary>
            <returns>Un mensaje con la lista de entrenadores en espera o un mensaje indicando que la lista está vacía.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.TrainerIsWaiting(System.String)">
            <summary>
            Verifica si un entrenador está en la lista de espera.
            </summary>
            <param name="displayName">El nombre del entrenador.</param>
            <returns>Un mensaje indicando si el entrenador está esperando.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.CreateBattle(Ucu.Poo.DiscordBot.Domain.Trainer,Ucu.Poo.DiscordBot.Domain.Trainer)">
            <summary>
            Crea una batalla entre dos entrenadores.
            </summary>
            <param name="player">El primer entrenador.</param>
            <param name="opponent">El oponente.</param>
            <returns>Un mensaje indicando el inicio de la batalla.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.CreateNewBattle(System.String,System.String)">
            <summary>
            Crea una nueva batalla entre dos entrenadores, seleccionando un oponente automáticamente si no se proporciona.
            </summary>
            <param name="playerDisplayName">El nombre del entrenador que inicia la batalla.</param>
            <param name="opponentDisplayName">El nombre del oponente, o null si se selecciona automáticamente.</param>
            <returns>Un mensaje indicando el resultado de la operación.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetAvailableItems(System.String)">
            <summary>
            Se imprime la lista de pociones disponibles para el jugador.
            </summary>
            <param name="playerDisplayName">El nombre para mostrar del jugador.</param>
            <returns>Un mensaje con los items disponibles.</returns>
            <summary>
            Se imprime la lista de pociones disponibles para el jugador.
            </summary>
            <param name="playerDisplayName">El nombre para mostrar del jugador.</param>
            <returns>Un mensaje con los items disponibles.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.ChangePokemon(System.String,System.String)">
            <summary>
            Cambia el pokemon actual del jugador por otro de su lista de pokemones.
            </summary>
            <param name="displayName">El nombre para mostrar del jugador.</param>
            <param name="pokemonName">El nombre del pokemon a cambiar.</param>
            <returns>Un mensaje de confirmación del cambio del Pokemon.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.UsePotion(System.String,System.String)">
            <summary>
            Usuario gasta su turno eligiendo una poción luego de seleccionarla de 
            su lista de pociones impresas en la consola.
            </summary>
            <param name="playerDisplayName">El primer jugador.</param>
            <param name="potionName">El nombre de la poción seleccionada.</param>
            <returns>Un mensaje con el resultado de la acción.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.AttackPokemon(System.String,System.String)">
            <summary>
            Usuario gasta su turno atacando al oponente con un ataque de su pokemon.
            </summary>
            <param name="playerDisplayName">El primer jugador.</param>
            <param name="attackName">El nombre del ataque.</param>
            <param name="opponentDisplayName">El nombre del oponente.</param>
            <returns>Un mensaje de confirmación del ataque.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.SpecialAttackPokemon(System.String,System.String)">
            <summary>
            Usuario gasta su turno atacando al oponente con un ataque especial de su pokemon.
            </summary>
            <param name="playerDisplayName">El nombre para mostrar del jugador.</param>
            <param name="specialAttackName">El nombre del ataque especial.</param>
            <param name="opponentDisplayName">El nombre del oponente.</param>
            <returns>Un mensaje de confirmación del ataque especial.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.DetermineAttack(System.String,System.String)">
            <summary>
            Determina el tipo de ataque y ejecuta el correspondiente: normal o especial.
            </summary>
            <param name="displayName">El nombre del jugador que ataca.</param>
            <param name="attackName">El nombre del ataque.</param>
            <returns>Un mensaje con el resultado del ataque.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.IsPlayerInGame(System.String)">
            <summary>
            Verifica si un jugador está en una batalla.
            </summary>
            <param name="playerDisplayName">El nombre del jugador.</param>
            <returns>Un valor booleano que indica si el jugador está en una batalla.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.PlayerWithPokemon(System.String)">
            <summary>
            Verifica si un jugador tiene los Pokémon necesarios para combatir.
            </summary>
            <param name="playerDisplayName">El nombre del jugador.</param>
            <returns>Un mensaje indicando si el jugador tiene los 6 Pokémon o null si el jugador no está en una batalla.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.PokemonSelection(System.String,System.String)">
            <summary>
            Gestiona la selección de Pokémon por parte de un jugador, validando
            los índices y asegurándose de que los Pokémon seleccionados sean válidos.
            </summary>
            <param name="playerDisplayName">El nombre del jugador que realiza la selección.</param>
            <param name="indices">
            Una cadena de texto que contiene los índices separados por espacios
            correspondientes a los Pokémon seleccionados por el jugador.
            </param>
            <returns>
            Una tupla que contiene un mensaje de confirmación o error y
            un mensaje opcional que indica si la batalla está lista para comenzar.
            </returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.CheckToStartBattle(System.String)">
            <summary>
            Verifica si la batalla está lista para iniciar.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns>Un valor booleano que indica si la batalla está lista.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetOpponent(System.String)">
            <summary>
            Obtiene el oponente del jugador pasado como parámetro.
            </summary>
            <param name="playerDisplayName">El nombre del jugador.</param>
            <returns>Un objeto de tipo <see cref="T:Ucu.Poo.DiscordBot.Domain.Trainer"/> que representa al oponente del jugador.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.AssignActualPokemon(System.String,System.String)">
            <summary>
            Asigna el Pokémon actual de un jugador para la batalla.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <param name="pokemonName">El nombre del Pokémon que se va a asignar.</param>
            <returns>Una tupla con un mensaje de éxito o error y el nombre del oponente si es necesario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetPokemonAttacks(System.String,System.String)">
            <summary>
            Obtiene los ataques disponibles de un Pokémon.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <param name="pokemonName">El nombre del Pokémon cuyos ataques se desean obtener.</param>
            <returns>Una cadena de texto con los ataques disponibles del Pokémon.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetBattleResult(System.String,System.String)">
            <summary>
            Obtiene el resultado de la batalla entre dos jugadores.
            </summary>
            <param name="player1DisplayName">El nombre del primer jugador.</param>
            <param name="player2DisplayName">El nombre del segundo jugador.</param>
            <returns>Un mensaje indicando el ganador de la batalla o null si la batalla aún está en progreso.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.InitialVerifications(Ucu.Poo.DiscordBot.Domain.Trainer,Ucu.Poo.DiscordBot.Domain.Trainer,Ucu.Poo.DiscordBot.Domain.Battle,System.Nullable{System.Boolean})">
            <summary>
            Realiza las verificaciones iniciales para asegurar que la acción es válida.
            </summary>
            <param name="player">El jugador que realiza la acción.</param>
            <param name="opponent">El oponente del jugador.</param>
            <param name="battle">La batalla en curso.</param>
            <param name="forChange">Indica si la acción es para cambiar Pokémon.</param>
            <returns>Una tupla con un mensaje de error si alguna verificación falla, o null si todas las verificaciones son correctas.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.PokemonCatalog">
            <summary>
            Clase que representa un catálogo de Pokémon y proporciona funcionalidad para
            crear instancias de Pokémon y asociarlos con sus ataques.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.PokemonCatalog.Catalog">
            <summary>
            Enum que define el catálogo de Pokémon disponibles.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.PokemonCatalog.CreatePokemon(Ucu.Poo.DiscordBot.Domain.PokemonCatalog.Catalog)">
            <summary>
            Crea una instancia de un Pokémon según la entrada del catálogo.
            </summary>
            <param name="catalogEntry">La entrada del catálogo que representa el Pokémon deseado.</param>
            <returns>Una instancia del Pokémon especificado.</returns>
            <exception cref="T:System.ArgumentException">Se lanza si el Pokémon no está en el catálogo.</exception>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.PokemonCatalog.CreatAttackList(Ucu.Poo.DiscordBot.Domain.PokemonCatalog.Catalog)">
            <summary>
            Función que asocia cada entrada del catálogo con una lista de ataques específicos para ese Pokémon.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Trainer">
            <summary>
            Esta clase representa un jugador en el juego Pokémon.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.DisplayName">
            <summary>
            El nombre de usuario de Discord en el servidor del bot del jugador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.Stage">
            <summary>
            El estado del entrenador. 1: Esperando en la lista de espera,
            2: En una batalla, con los pokemones seleccionados
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.PokemonList">
            <summary>
            Lista de pokemones del entrenador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.ActualPokemon">
            <summary>
            El pokemon actualmente activo del entrenador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.Items">
            <summary>
            Lista de items que el entrenador tiene disponibles.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Trainer"/> con
            el nombre de usuario de Discord y el pokemon inicial del entrenador.
            </summary>
            <param name="displayName">El nombre de usuario de Discord.</param>
            <param name="name">Nombre del entrenador.</param>
            <param name="actualPokemon">El pokemon inicial del entrenador.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.AddPokemon(Poke.Clases.Pokemon)">
            <summary>
            Agrega un Pokémon a la selección del usuario.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.GetTotalPokemonLife">
            <summary>
            Calcula la vida total de todos los pokemones del entrenador.
            </summary>
            <returns>La suma de los puntos de vida de todos los pokemones.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.HasItem(Poke.Clases.Item)">
            <summary>
            Verifica si el entrenador tiene un item específico.
            </summary>
            <param name="item">El item a buscar.</param>
            <returns>Verdadero si el entrenador tiene el item; de lo contrario, falso.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.ShowPokemonsInfo">
            <summary>
            Muestra la información de todos los pokemones que posee el entrenador.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.SetActualPokemon(Poke.Clases.Pokemon)">
            <summary>
            Establece el pokemon actualmente activo del entrenador.
            </summary>
            <param name="pokemon">El pokemon que será el activo.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.RemoveItem(Poke.Clases.Item)">
            <summary>
            Elimina un item específico de la lista de items del entrenador.
            </summary>
            <param name="item">El item a eliminar.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.AddItem(Poke.Clases.Item)">
            <summary>
            Agrega un item a la lista de items del entrenador.
            </summary>
            <param name="item">El item a agregar.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.UseItem(Poke.Clases.Item,Poke.Clases.Pokemon)">
            <summary>
            Usa un item específico en un pokemon objetivo.
            </summary>
            <param name="item">El item a usar.</param>
            <param name="objective">El pokemon en el cual usar el item.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.WaitingList">
            <summary>
            Esta clase representa la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.AddTrainer(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a agregar.
            </param>
            <returns><c>true</c> si se agrega el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.RemoveTrainer(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a remover.
            </param>
            <returns><c>true</c> si se remueve el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.FindTrainerByDisplayName(System.String)">
            <summary>
            Busca un jugador por el nombre de usuario de Discord en el servidor del
            bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a buscar.
            </param>
            <returns>El jugador encontrado o <c>null</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.GetAnyoneWaiting">
            <summary>
            Retorna un jugador cualquiera esperando para jugar. En esta
            implementación provista no es cualquiera, sino el primero. En la
            implementación definitiva, debería ser uno aleatorio.
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.GetAllWaiting">
            <summary>
            Retorna una lista de todos los jugadores en la lista de espera.
            </summary>
            <returns>Una lista de jugadores esperando para jugar.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.Bot">
            <summary>
            Esta clase implementa el bot de Discord.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.BotLoader">
            <summary>
            Esta clase ejecuta el bot de Discord hasta que en la terminal donde se
            ejecuta el bot se oprime la tecla 'Q'.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.IBot">
            <summary>
            La interfaz del Bot de Discord para usar con inyección de dependencias.
            </summary>
        </member>
        <member name="T:Poke.Clases.Attack">
            <summary>
            Representa un ataque que un Pokémon puede utilizar en combate.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.Name">
            <summary>
            Obtiene o establece el nombre del ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.Damage">
            <summary>
            Obtiene o establece el valor de daño base del ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.AttackType">
            <summary>
            Obtiene o establece el tipo del ataque (e.g., Fuego, Agua, etc.).
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.IsSpecial">
            <summary>
            Indica si el ataque es especial (en lugar de físico).
            </summary>
        </member>
        <member name="M:Poke.Clases.Attack.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Attack"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Attack.CalculateDamage(Poke.Clases.Pokemon)">
            <summary>
            Calcula el daño final del ataque basado en la efectividad del tipo contra el tipo del objetivo.
            </summary>
            <param name="target">El Pokémon objetivo que recibe el ataque.</param>
            <returns>El daño final después de aplicar la ventaja o desventaja de tipo.</returns>
        </member>
        <member name="T:Poke.Clases.Pokemon">
            <summary>
            Representa un Pokémon con sus atributos y capacidades de ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Name">
            <summary>Nombre del Pokémon.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.AttackCapacity">
            <summary>Capacidad de ataque del Pokémon, inicialmente en 1 si puede atacar.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.State">
            <summary>Estado actual del Pokémon (dormido, paralizado, etc.), normal si no tiene estado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Hp">
            <summary>Puntos de vida del Pokémon.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.InitialHealth">
            <summary>Vida inicial del Pokémon.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Type">
            <summary>Tipo de Pokémon según la clase Type.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.AttackList">
            <summary>Lista de ataques disponibles para el Pokémon, máximo de 4 ataques.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.SleepState">
            <summary>Cantidad de turnos que el Pokémon estará dormido; nulo si no está dormido.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Paralized">
            <summary>Indica si el Pokémon está paralizado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Poisoned">
            <summary>Indica si el Pokémon está envenenado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Burned">
            <summary>Indica si el Pokémon está quemado.</summary>
        </member>
        <member name="M:Poke.Clases.Pokemon.#ctor(System.String,System.Double,System.Double,System.String,Poke.Clases.Type.PokemonType,System.Collections.Generic.List{Poke.Clases.Attack})">
            <summary>
            Constructor para inicializar un Pokémon con su nombre, puntos de vida, capacidad de ataque, estado y tipo.
            </summary>
            <param name="name">Nombre del Pokémon.</param>
            <param name="health">Puntos de vida del Pokémon.</param>
            <param name="AttackCapacity">Capacidad de ataque del Pokémon.</param>
            <param name="state">Estado inicial del Pokémon.</param>
            <param name="type">Tipo del Pokémon.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.IsPokemonAlive">
            <summary>
            Verifica si el Pokémon está vivo.
            </summary>
            <returns>Mensaje indicando si el Pokémon está vivo o muerto.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.Attack(Ucu.Poo.DiscordBot.Domain.Trainer,Poke.Clases.Pokemon,Poke.Clases.Pokemon,Poke.Clases.Attack)">
            <summary>
            Realiza un ataque contra otro Pokémon si tiene la capacidad para hacerlo.
            </summary>
            <param name="opponentPokemon">El Pokémon oponente a atacar.</param>
            <param name="playerPokemon">El Pokémon atacante.</param>
            <param name="attack">El ataque específico a usar.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.AddAttack(Poke.Clases.Attack)">
            <summary>
            Añade un ataque a la lista de ataques del Pokémon.
            </summary>
            <param name="nuevoAttack">El ataque a añadir.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.RecibeDamage(Ucu.Poo.DiscordBot.Domain.Trainer,System.Double)">
            <summary>
            Aplica daño al Pokémon, reduciendo sus puntos de vida.
            </summary>
            <param name="damage">Cantidad de daño recibido.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.AddHP(System.Double)">
            <summary>
            Añade puntos de vida al Pokémon.
            </summary>
            <param name="hp">Cantidad de vida a añadir.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetAttacks">
            <summary>
            Obtiene la lista de ataques del Pokémon.
            </summary>
            <returns>Lista de ataques del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetType">
            <summary>
            Obtiene el tipo del Pokémon.
            </summary>
            <returns>Tipo del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetHp">
            <summary>
            Obtiene los puntos de vida del Pokémon.
            </summary>
            <returns>Puntos de vida del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.StateActualization">
            <summary>
            Actualiza los efectos de los estados del Pokémon en cada turno.
            </summary>
        </member>
        <member name="T:Poke.Clases.Asleep">
            <summary>
            Representa un ataque especial que puede causar el estado de "Dormido" en un Pokémon.
            </summary>
        </member>
        <member name="M:Poke.Clases.Asleep.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Asleep"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque según el tipo de Pokémon.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Asleep.Sleep(Poke.Clases.Pokemon)">
            <summary>
            Aplica el efecto de "Dormido" al Pokémon objetivo. 
            Este efecto impide que el Pokémon objetivo pueda atacar durante un número aleatorio de turnos (1 a 4).
            </summary>
            <param name="objective">El Pokémon objetivo que será afectado por el estado "Dormido".</param>
        </member>
        <member name="T:Poke.Clases.Burned">
            <summary>
            Representa un ataque especial que puede causar el estado de "Quemado" en un Pokémon.
            </summary>
        </member>
        <member name="M:Poke.Clases.Burned.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Burned"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque según el tipo de Pokémon.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Burned.Burn(Poke.Clases.Pokemon)">
            <summary>
            Aplica el efecto de "Quemado" al Pokémon objetivo. 
            Este efecto reduce el HP del objetivo en un 10%.
            </summary>
            <param name="objective">El Pokémon objetivo que será afectado por el estado "Quemado".</param>
        </member>
        <member name="T:Poke.Clases.Paralized">
            <summary>
            Representa un ataque especial que puede causar el estado de "Paralizado" en un Pokémon.
            </summary>
        </member>
        <member name="M:Poke.Clases.Paralized.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Paralized"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque según el tipo de Pokémon.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Paralized.Paralize(Poke.Clases.Pokemon)">
            <summary>
            Aplica el efecto de "Paralizado" al Pokémon objetivo.
            Este estado puede impedir que el Pokémon ataque, dependiendo de un cálculo aleatorio.
            </summary>
            <param name="objective">El Pokémon objetivo que será afectado por el estado "Paralizado".</param>
        </member>
        <member name="T:Poke.Clases.Poisoned">
            <summary>
            Representa un ataque especial que puede causar el estado de "Envenenado" en un Pokémon.
            </summary>
        </member>
        <member name="M:Poke.Clases.Poisoned.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Poisoned"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque según el tipo de Pokémon.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Poisoned.Envenenar(Poke.Clases.Pokemon)">
            <summary>
            Aplica el efecto de "Envenenado" al Pokémon objetivo.
            Este estado reduce un porcentaje de la salud del Pokémon objetivo en cada turno.
            </summary>
            <param name="objective">El Pokémon objetivo que será afectado por el estado "Envenenado".</param>
        </member>
        <member name="T:Poke.Clases.Type">
            <summary>
            Clase estática que define los tipos de Pokémon y sus ventajas/desventajas de tipo.
            </summary>
        </member>
        <member name="T:Poke.Clases.Type.PokemonType">
            <summary>
            Enumera los tipos de Pokémon disponibles.
            </summary>
        </member>
        <member name="T:Poke.Clases.Type.TypeAdvantage">
            <summary>
            Define el tipo de ventaja en una batalla.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Advantage">
            <summary>
            Ventaja de tipo.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Neutral">
            <summary>
            Tipo neutral.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Disadvantage">
            <summary>
            Desventaja de tipo.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.typeAdvantages">
            <summary>
            Diccionario que contiene las combinaciones de tipos y sus respectivas ventajas.
            </summary>
        </member>
        <member name="M:Poke.Clases.Type.GetTypeAdvantage(Poke.Clases.Type.PokemonType,Poke.Clases.Type.PokemonType)">
            <summary>
            Obtiene la ventaja de tipo entre dos Pokémon.
            </summary>
            <param name="type1">Tipo del Pokémon atacante.</param>
            <param name="type2">Tipo del Pokémon defensor.</param>
            <returns>La ventaja de tipo entre los dos Pokémon (ventaja, neutral o desventaja).</returns>
        </member>
        <member name="T:Poke.Clases.Battle">
            <summary>
            Representa una batalla entre dos entrenadores Pokémon, gestionando turnos, jugadas, y verificando el final del juego.
            </summary>
        </member>
        <member name="F:Poke.Clases.Battle.Play">
            <summary>
            Instancia para gestionar las jugadas posibles en cada turno.
            </summary>
        </member>
        <member name="F:Poke.Clases.Battle.Turn">
            <summary>
            Representa el turno actual en la batalla, alternando entre los jugadores.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.PlayerPokemon">
            <summary>
            Pokemon del jugador principal.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.OpponentPokemon">
            <summary>
            Pokemon del oponente.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.ActualTurn">
            <summary>
            Contador del turno actual.
            </summary>
        </member>
        <member name="F:Poke.Clases.Battle.waitList">
            <summary>
            Instancia de WaitList para gestionar los entrenadores en espera.
            </summary>
        </member>
        <member name="M:Poke.Clases.Battle.#ctor(Poke.Clases.Pokemon,Poke.Clases.Pokemon,Poke.Clases.WaitList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Battle"/>.
            </summary>
            <param name="playerPokemon">El pokemon del jugador.</param>
            <param name="opponentPokemon">El pokemon oponente.</param>
        </member>
        <member name="M:Poke.Clases.Battle.InitialTurn">
            <summary>
            Determina de forma aleatoria cuál jugador comienza el primer turno.
            </summary>
        </member>
        <member name="M:Poke.Clases.Battle.PlayTurn(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer,System.String,System.String)">
            <summary>
            Ejecuta un turno de la batalla, permitiendo a un jugador realizar una jugada y luego alterna el turno al otro jugador.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="M:Poke.Clases.Battle.BattleFinished(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer)">
            <summary>
            Verifica si la batalla ha terminado, es decir, si uno de los jugadores ha ganado.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
            <returns>True si uno de los jugadores ha ganado; de lo contrario, False.</returns>
        </member>
        <member name="M:Poke.Clases.Battle.InfoTurn(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer)">
            <summary>
            Muestra el estado actual de los Pokémon de ambos jugadores, incluyendo el turno actual.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="M:Poke.Clases.Battle.CompleteBattle(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer,System.String,System.String)">
            <summary>
            Ejecuta la batalla completa entre dos pokemon, alternando turnos hasta que uno de los jugadores gane.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="T:Poke.Clases.OriginalTrainer">
            <summary>
            Representa a un entrenador en el juego, quien tiene una lista de pokemones y una lista de items.
            </summary>
        </member>
        <member name="F:Poke.Clases.OriginalTrainer.Pokemons">
            <summary>
            Lista de pokemones que posee el entrenador.
            </summary>
        </member>
        <member name="F:Poke.Clases.OriginalTrainer.ActualPokemon">
            <summary>
            El pokemon actualmente activo del entrenador.
            </summary>
        </member>
        <member name="F:Poke.Clases.OriginalTrainer.Items">
            <summary>
            Lista de items que el entrenador tiene disponibles.
            </summary>
        </member>
        <member name="P:Poke.Clases.OriginalTrainer.name">
            <summary>
            Nombre del entrenador.
            </summary>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.#ctor(System.String,Poke.Clases.Pokemon)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.OriginalTrainer"/>.
            </summary>
            <param name="name">Nombre del entrenador.</param>
            <param name="ActualPokemon">El pokemon actual del entrenador.</param>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.AddPokemon">
            <summary>
            Agrega los pokemones a la lista de pokemones del entrenador.
            </summary>
            <param name="pokemon">El pokemon a agregar.</param>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.PokemonLife">
            <summary>
            Calcula la vida total de todos los pokemones del entrenador.
            </summary>
            <returns>La suma de los puntos de vida de todos los pokemones.</returns>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.GetItem(Poke.Clases.Item)">
            <summary>
            Verifica si el entrenador tiene un item específico.
            </summary>
            <param name="item">El item a buscar.</param>
            <returns>Verdadero si el entrenador tiene el item; de lo contrario, falso.</returns>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.GetPokemonsInfo">
            <summary>
            Muestra la información de todos los pokemones que posee el entrenador.
            </summary>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.getActualPokemon">
            <summary>
            Obtiene el pokemon actualmente activo del entrenador.
            </summary>
            <returns>El pokemon actual.</returns>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.RemoveItem(Poke.Clases.Item)">
            <summary>
            Elimina un item específico de la lista de items del entrenador.
            </summary>
            <param name="item">El item a eliminar.</param>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.AddItem(Poke.Clases.Item)">
            <summary>
            Agrega un item a la lista de items del entrenador.
            </summary>
            <para name="item">El item a agregar.</para>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.useItem(Poke.Clases.Item,Poke.Clases.Pokemon)">
            <summary>
            Usa un item específico en un pokemon objetivo.
            </summary>
            <param name="item">El item a usar.</param>
            <param name="objective">El pokemon en el cual usar el item.</param>
        </member>
        <member name="T:Poke.Clases.Play">
            <summary>
            Clase que gestiona las posibles jugadas de un entrenador durante un turno.
            </summary>
        </member>
        <member name="M:Poke.Clases.Play.PossiblePlays(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer,Poke.Clases.Item,Poke.Clases.Pokemon,System.String,System.String)">
            <summary>
            Permite al entrenador elegir entre atacar, cambiar de Pokémon o usar un ítem.
            </summary>
            <param name="player1">El entrenador que realiza la jugada.</param>
            <param name="player2">El entrenador oponente.</param>
            <param name="item">El ítem que el jugador puede usar.</param>
            <param name="objective">El Pokémon objetivo del ítem.</param>
        </member>
    </members>
</doc>
