<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Ucu.Poo.DiscordBot.Commands.BattleCommand">
            <summary>
            Esta clase implementa el comando 'battle' del bot. Este comando une al
            jugador que envía el mensaje con el oponente que se recibe como parámetro,
            si lo hubiera, en una batalla; si no se recibe un oponente, lo une con
            cualquiera que esté esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.BattleCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'battle'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.CatalogueCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'selectPokemon'. Este comando permite al usuario
            visualizar el catalogo pokemon en pantalla.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.UsePotionCommand">
            <summary>
            Esta clase implementa el comando 'usePotion' del bot. Este comando le permite al usuario
            usar un item en un pokemon luego de pasar los chequeos necesarios.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.UsePotionCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'usePotion'. Este comando le permite al usuario
            usar un item en un pokemon luego de pasar los chequeos necesarios.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.AvailableItemsCommand">
            <summary>
            Esta clase implementa el comando 'availableItems' del bot. Este comando le permite al usuario
            ver los items disponibles para usar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.AvailableItemsCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'availableItems'. Este comando le permite al usuario
            ver los items disponibles para usar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.ChangePokemonCommand">
            <summary>
            Esta clase implementa el comando 'changepokemon' del bot. Este comando permite
            al jugador cambiar su Pokémon actual por otro del catálogo.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.ChangePokemonCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'changepokemon'. Este comando permite al jugador
            cambiar su Pokémon actual por otro del catálogo.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.PokemonNameCommand">
            <summary>
            Esta clase implementa el comando 'name' del bot. Este comando retorna el
            nombre de un Pokémon dado su identificador.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.PokemonNameCommand.#ctor(Microsoft.Extensions.Logging.ILogger{Ucu.Poo.DiscordBot.Commands.PokemonNameCommand})">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:Ucu.Poo.DiscordBot.Commands.PokemonNameCommand"/> con los valores recibidos como
            argumento.
            </summary>
            <param name="logger">El servicio de logging a utilizar.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.PokemonNameCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'name'. Este comando retorna el nombre de un
            Pokémon dado su identificador.
            </summary>
            <param name="id">El identificador del Pokémon a buscar.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.UserInfoCommand">
            <summary>
            Esta clase implementa el comando 'userinfo', alias 'who' o 'whois' del bot.
            Este comando retorna información sobre el usuario que envía el mensaje o sobre
            otro usuario si se incluye como parámetro..
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.UserInfoCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'userinfo', alias 'who' o 'whois' del bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord a buscar.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.RemovePokemonCommand">
            <summary>
            Clase que implementa el comando 'removepokemon'. Este comando permite
            a los usuarios eliminar uno o varios Pokémon de su selección actual
            utilizando índices.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.RemovePokemonCommand.ExecuteAsync(System.String)">
            <summary>
            Comando 'removepokemon'. Este comando elimina uno o varios Pokémon
            específicos de la selección del usuario utilizando sus índices.
            </summary>
            <param name="indices">
            Los índices de los Pokémon que el usuario desea eliminar.
            </param>
            <returns>Una tarea que representa la operación asincrónica.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.ResetSelectionCommand">
            <summary>
            Clase que implementa el comando 'resetselection'. Este comando permite
            a un usuario reiniciar su selección de Pokémon.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.ResetSelectionCommand.ExecuteAsync">
            <summary>
            Comando 'resetselection'. Este comando elimina la selección de Pokémon
            realizada por el usuario y muestra un mensaje de confirmación.
            </summary>
            <returns>Una tarea que representa la operación asincrónica.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.SelectPokemonCommand">
            <summary>
            Esta clase implementa el comando 'selectpokemon' del bot. Este comando permite
            al jugador seleccionar hasta 6 Pokémon del catálogo utilizando sus índices.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.SelectPokemonCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'selectpokemon'. Este comando permite al jugador
            seleccionar hasta 6 Pokémon del catálogo utilizando sus índices.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.ViewSelectionCommand">
            <summary>
            Clase que implementa el comando 'viewselection'. Este comando permite
            a los usuarios ver los Pokémon que han seleccionado actualmente.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.ViewSelectionCommand.ExecuteAsync">
            <summary>
            Comando 'viewselection'. Este comando muestra la lista de Pokémon 
            seleccionados por el usuario.
            </summary>
            <returns>Una tarea que representa la operación asincrónica.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.JoinCommand">
            <summary>
            Esta clase implementa el comando 'join' del bot. Este comando une al jugador
            que envía el mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.JoinCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'join'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.LeaveCommand">
            <summary>
            Esta clase implementa el comando 'leave' del bot. Este comando remueve el
            jugador que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.LeaveCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'leave' del bot. Este comando remueve el jugador
            que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.StillWaitingCommand">
            <summary>
            Esta clase implementa el comando 'stillWaiting' del bot. Este comando le muestra
            al usuario si él esta esperando para jugar, es decir, si esta dentro de la Waitlist.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.StillWaitingCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'stillWaiting'. Este comando le muestra al usuario si él
            esta esperando para jugar, es decir, si esta dentro de la Waitlist.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.WaitingCommand">
            <summary>
            Esta clase implementa el comando 'waitinglist' del bot. Este comando muestra
            la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.WaitingCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'waitinglist'. Este comando muestra la lista de
            jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Battle">
            <summary>
            Esta clase representa una batalla entre dos jugadores.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Player1">
            <summary>
            Obtiene un valor que representa el primer jugador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Player2">
            <summary>
            Obtiene un valor que representa al oponente.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.State">
            <summary>
            Obtiene o establece el estado de la batalla.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Battle.#ctor(System.String,System.String)">
             <summary>
             Inicializa una instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Battle"/> con los
             valores recibidos como argumento.
             </summary>
             <param name="player1">El primer jugador.</param>
             <param name="player2">El oponente.</param>
            
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Battle.StartBattle">
             <summary>
             Inicia la batalla.
             </summary>
            
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Battle.DetermineWinner">
            <summary>
            Determina el ganador de la batalla.
            </summary>
            <returns>El nombre del jugador ganador.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.BattlesList">
            <summary>
            Esta clase representa la lista de batallas en curso.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.BattlesList.AddBattle(System.String,System.String)">
            <summary>
            Crea una nueva batalla entre dos jugadores.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
            <returns>La batalla creada.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.BattlesList.FindPlayerInBattle(System.String)">
            <summary>
            Muestra todas las batallas en curso.
            </summary>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Facade">
            <summary>
            Esta clase recibe las acciones y devuelve los resultados que permiten
            implementar las historias de usuario. Otras clases que implementan el bot
            usan esta <see cref="T:Ucu.Poo.DiscordBot.Domain.Facade"/> pero no conocen el resto de las clases del
            dominio. Esta clase es un singleton.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Facade.Instance">
            <summary>
            Obtiene la única instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Facade"/>.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.Reset">
            <summary>
            Inicializa este singleton. Es necesario solo en los tests.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.AddTrainerToWaitingList(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.RemoveTrainerFromWaitingList(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El jugador a remover.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetAllTrainersWaiting">
            <summary>
            Obtiene la lista de jugadores esperando.
            </summary>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.TrainerIsWaiting(System.String)">
            <summary>
            Determina si un jugador está esperando para jugar.
            </summary>
            <param name="displayName">El jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.StartBattle(System.String,System.String)">
            <summary>
            Crea una batalla entre dos jugadores.
            </summary>
            <param name="playerDisplayName">El primer jugador.</param>
            <param name="opponentDisplayName">El oponente.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetAvailableItems(System.String)">
            <summary>
            Se imprime la lista de pociones disponibles para el jugador.
            </summary>
            <returns>Un mensaje con los items disponibles.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.UsePotion(System.String,System.String)">
            <summary>
            Usuario gasta su turno eligiendo una poción luego de seleccionarla de 
            su lista de pociones impresas en la consola.
            </summary>
            <param name="playerDisplayName">El primer jugador.</param>
            <param name="potionName">El nombre de la poción.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.PokemonCatalog">
            <summary>
            Clase que representa un catálogo de Pokémon y proporciona funcionalidad para
            crear instancias de Pokémon y asociarlos con sus ataques.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.PokemonCatalog.Catalog">
            <summary>
            Enum que define el catálogo de Pokémon disponibles.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.PokemonCatalog.CreatePokemon(Ucu.Poo.DiscordBot.Domain.PokemonCatalog.Catalog)">
            <summary>
            Crea una instancia de un Pokémon según la entrada del catálogo.
            </summary>
            <param name="catalogEntry">La entrada del catálogo que representa el Pokémon deseado.</param>
            <returns>Una instancia del Pokémon especificado.</returns>
            <exception cref="T:System.ArgumentException">Se lanza si el Pokémon no está en el catálogo.</exception>
        </member>
        <member name="F:Ucu.Poo.DiscordBot.Domain.PokemonCatalog.PokemonAttacks">
            <summary>
            Diccionario que asocia cada entrada del catálogo con una lista de ataques específicos para ese Pokémon.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Trainer">
            <summary>
            Esta clase representa un jugador en el juego Pokémon.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.DisplayName">
            <summary>
            El nombre de usuario de Discord en el servidor del bot del jugador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.Pokemons">
            <summary>
            Lista de pokemones del entrenador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.ActualPokemon">
            <summary>
            El pokemon actualmente activo del entrenador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.Items">
            <summary>
            Lista de items que el entrenador tiene disponibles.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.#ctor(System.String,Poke.Clases.Pokemon)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Trainer"/> con
            el nombre de usuario de Discord y el pokemon inicial del entrenador.
            </summary>
            <param name="displayName">El nombre de usuario de Discord.</param>
            <param name="name">Nombre del entrenador.</param>
            <param name="actualPokemon">El pokemon inicial del entrenador.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.AddPokemon(Poke.Clases.Pokemon)">
            <summary>
            Agrega un pokemon a la lista de pokemones del entrenador.
            </summary>
            <param name="pokemon">El pokemon a agregar.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.GetTotalPokemonLife">
            <summary>
            Calcula la vida total de todos los pokemones del entrenador.
            </summary>
            <returns>La suma de los puntos de vida de todos los pokemones.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.HasItem(Poke.Clases.Item)">
            <summary>
            Verifica si el entrenador tiene un item específico.
            </summary>
            <param name="item">El item a buscar.</param>
            <returns>Verdadero si el entrenador tiene el item; de lo contrario, falso.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.ShowPokemonsInfo">
            <summary>
            Muestra la información de todos los pokemones que posee el entrenador.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.SetActualPokemon(Poke.Clases.Pokemon)">
            <summary>
            Establece el pokemon actualmente activo del entrenador.
            </summary>
            <param name="pokemon">El pokemon que será el activo.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.RemoveItem(Poke.Clases.Item)">
            <summary>
            Elimina un item específico de la lista de items del entrenador.
            </summary>
            <param name="item">El item a eliminar.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.AddItem(Poke.Clases.Item)">
            <summary>
            Agrega un item a la lista de items del entrenador.
            </summary>
            <param name="item">El item a agregar.</param>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.UseItem(Poke.Clases.Item,Poke.Clases.Pokemon)">
            <summary>
            Usa un item específico en un pokemon objetivo.
            </summary>
            <param name="item">El item a usar.</param>
            <param name="objective">El pokemon en el cual usar el item.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.WaitingList">
            <summary>
            Esta clase representa la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.AddTrainer(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a agregar.
            </param>
            <returns><c>true</c> si se agrega el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.RemoveTrainer(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a remover.
            </param>
            <returns><c>true</c> si se remueve el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.FindTrainerByDisplayName(System.String)">
            <summary>
            Busca un jugador por el nombre de usuario de Discord en el servidor del
            bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a buscar.
            </param>
            <returns>El jugador encontrado o <c>null</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.GetAnyoneWaiting">
            <summary>
            Retorna un jugador cualquiera esperando para jugar. En esta
            implementación provista no es cualquiera, sino el primero. En la
            implementación definitiva, debería ser uno aleatorio.
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.GetAllWaiting">
            <summary>
            Retorna una lista de todos los jugadores en la lista de espera.
            </summary>
            <returns>Una lista de jugadores esperando para jugar.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Services.UserPokemonSelectionService.AddPokemon(System.String,Poke.Clases.Pokemon)">
            <summary>
            Agrega un Pokémon a la selección del usuario.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Services.UserPokemonSelectionService.GetUserSelections(System.String)">
            <summary>
            Obtiene la lista de Pokémon seleccionados por el usuario.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Services.UserPokemonSelectionService.RemovePokemon(System.String,System.String)">
            <summary>
            Elimina un Pokémon de la selección del usuario.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Services.UserPokemonSelectionService.ClearSelections(System.String)">
            <summary>
            Limpia todas las selecciones del usuario.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.Bot">
            <summary>
            Esta clase implementa el bot de Discord.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.BotLoader">
            <summary>
            Esta clase ejecuta el bot de Discord hasta que en la terminal donde se
            ejecuta el bot se oprime la tecla 'Q'.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.IBot">
            <summary>
            La interfaz del Bot de Discord para usar con inyección de dependencias.
            </summary>
        </member>
        <member name="T:Poke.Clases.Attack">
            <summary>
            Representa un ataque que un Pokémon puede utilizar en combate.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.Name">
            <summary>
            Obtiene o establece el nombre del ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.Damage">
            <summary>
            Obtiene o establece el valor de daño base del ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.AttackType">
            <summary>
            Obtiene o establece el tipo del ataque (e.g., Fuego, Agua, etc.).
            </summary>
        </member>
        <member name="P:Poke.Clases.Attack.IsSpecial">
            <summary>
            Indica si el ataque es especial (en lugar de físico).
            </summary>
        </member>
        <member name="M:Poke.Clases.Attack.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Attack"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Attack.CalculateDamage(Poke.Clases.Pokemon)">
            <summary>
            Calcula el daño final del ataque basado en la efectividad del tipo contra el tipo del objetivo.
            </summary>
            <param name="target">El Pokémon objetivo que recibe el ataque.</param>
            <returns>El daño final después de aplicar la ventaja o desventaja de tipo.</returns>
        </member>
        <member name="M:Poke.Clases.NormalAttack.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean)">
            <summary>
             Constructor para inicializar un ataque
             </summary>
        </member>
        <member name="T:Poke.Clases.Battle">
            <summary>
            Representa una batalla entre dos entrenadores Pokémon, gestionando turnos, jugadas, y verificando el final del juego.
            </summary>
        </member>
        <member name="F:Poke.Clases.Battle.Play">
            <summary>
            Instancia para gestionar las jugadas posibles en cada turno.
            </summary>
        </member>
        <member name="F:Poke.Clases.Battle.Turn">
            <summary>
            Representa el turno actual en la batalla, alternando entre los jugadores.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.PlayerPokemon">
            <summary>
            Pokemon del jugador principal.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.OpponentPokemon">
            <summary>
            Pokemon del oponente.
            </summary>
        </member>
        <member name="P:Poke.Clases.Battle.ActualTurn">
            <summary>
            Contador del turno actual.
            </summary>
        </member>
        <member name="F:Poke.Clases.Battle.waitList">
            <summary>
            Instancia de WaitList para gestionar los entrenadores en espera.
            </summary>
        </member>
        <member name="M:Poke.Clases.Battle.#ctor(Poke.Clases.Pokemon,Poke.Clases.Pokemon,Poke.Clases.WaitList)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Battle"/>.
            </summary>
            <param name="playerPokemon">El pokemon del jugador.</param>
            <param name="opponentPokemon">El pokemon oponente.</param>
        </member>
        <member name="M:Poke.Clases.Battle.InitialTurn">
            <summary>
            Determina de forma aleatoria cuál jugador comienza el primer turno.
            </summary>
        </member>
        <member name="M:Poke.Clases.Battle.PlayTurn(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer,System.String,System.String)">
            <summary>
            Ejecuta un turno de la batalla, permitiendo a un jugador realizar una jugada y luego alterna el turno al otro jugador.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="M:Poke.Clases.Battle.BattleFinished(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer)">
            <summary>
            Verifica si la batalla ha terminado, es decir, si uno de los jugadores ha ganado.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
            <returns>True si uno de los jugadores ha ganado; de lo contrario, False.</returns>
        </member>
        <member name="M:Poke.Clases.Battle.InfoTurn(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer)">
            <summary>
            Muestra el estado actual de los Pokémon de ambos jugadores, incluyendo el turno actual.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="M:Poke.Clases.Battle.CompleteBattle(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer,System.String,System.String)">
            <summary>
            Ejecuta la batalla completa entre dos pokemon, alternando turnos hasta que uno de los jugadores gane.
            </summary>
            <param name="player1">El primer entrenador.</param>
            <param name="player2">El segundo entrenador.</param>
        </member>
        <member name="T:Poke.Clases.OriginalTrainer">
            <summary>
            Representa a un entrenador en el juego, quien tiene una lista de pokemones y una lista de items.
            </summary>
        </member>
        <member name="F:Poke.Clases.OriginalTrainer.Pokemons">
            <summary>
            Lista de pokemones que posee el entrenador.
            </summary>
        </member>
        <member name="F:Poke.Clases.OriginalTrainer.ActualPokemon">
            <summary>
            El pokemon actualmente activo del entrenador.
            </summary>
        </member>
        <member name="F:Poke.Clases.OriginalTrainer.Items">
            <summary>
            Lista de items que el entrenador tiene disponibles.
            </summary>
        </member>
        <member name="P:Poke.Clases.OriginalTrainer.name">
            <summary>
            Nombre del entrenador.
            </summary>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.#ctor(System.String,Poke.Clases.Pokemon)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.OriginalTrainer"/>.
            </summary>
            <param name="name">Nombre del entrenador.</param>
            <param name="ActualPokemon">El pokemon actual del entrenador.</param>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.AddPokemon">
            <summary>
            Agrega los pokemones a la lista de pokemones del entrenador.
            </summary>
            <param name="pokemon">El pokemon a agregar.</param>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.PokemonLife">
            <summary>
            Calcula la vida total de todos los pokemones del entrenador.
            </summary>
            <returns>La suma de los puntos de vida de todos los pokemones.</returns>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.GetItem(Poke.Clases.Item)">
            <summary>
            Verifica si el entrenador tiene un item específico.
            </summary>
            <param name="item">El item a buscar.</param>
            <returns>Verdadero si el entrenador tiene el item; de lo contrario, falso.</returns>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.GetPokemonsInfo">
            <summary>
            Muestra la información de todos los pokemones que posee el entrenador.
            </summary>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.getActualPokemon">
            <summary>
            Obtiene el pokemon actualmente activo del entrenador.
            </summary>
            <returns>El pokemon actual.</returns>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.RemoveItem(Poke.Clases.Item)">
            <summary>
            Elimina un item específico de la lista de items del entrenador.
            </summary>
            <param name="item">El item a eliminar.</param>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.AddItem(Poke.Clases.Item)">
            <summary>
            Agrega un item a la lista de items del entrenador.
            </summary>
            <para name="item">El item a agregar.</para>
        </member>
        <member name="M:Poke.Clases.OriginalTrainer.useItem(Poke.Clases.Item,Poke.Clases.Pokemon)">
            <summary>
            Usa un item específico en un pokemon objetivo.
            </summary>
            <param name="item">El item a usar.</param>
            <param name="objective">El pokemon en el cual usar el item.</param>
        </member>
        <member name="T:Poke.Clases.Play">
            <summary>
            Clase que gestiona las posibles jugadas de un entrenador durante un turno.
            </summary>
        </member>
        <member name="M:Poke.Clases.Play.PossiblePlays(Poke.Clases.OriginalTrainer,Poke.Clases.OriginalTrainer,Poke.Clases.Item,Poke.Clases.Pokemon,System.String,System.String)">
            <summary>
            Permite al entrenador elegir entre atacar, cambiar de Pokémon o usar un ítem.
            </summary>
            <param name="player1">El entrenador que realiza la jugada.</param>
            <param name="player2">El entrenador oponente.</param>
            <param name="item">El ítem que el jugador puede usar.</param>
            <param name="objective">El Pokémon objetivo del ítem.</param>
        </member>
        <member name="T:Poke.Clases.Pokemon">
            <summary>
            Representa un Pokémon con sus atributos y capacidades de ataque.
            </summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Name">
            <summary>Nombre del Pokémon.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.AttackCapacity">
            <summary>Capacidad de ataque del Pokémon, inicialmente en 1 si puede atacar.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.State">
            <summary>Estado actual del Pokémon (dormido, paralizado, etc.), nulo si no tiene estado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Hp">
            <summary>Puntos de vida del Pokémon.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Type">
            <summary>Tipo de Pokémon según la clase Type.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.AttackList">
            <summary>Lista de ataques disponibles para el Pokémon, máximo de 4 ataques.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.SleepState">
            <summary>Cantidad de turnos que el Pokémon estará dormido; nulo si no está dormido.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Paralized">
            <summary>Indica si el Pokémon está paralizado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Poisoned">
            <summary>Indica si el Pokémon está envenenado.</summary>
        </member>
        <member name="P:Poke.Clases.Pokemon.Burned">
            <summary>Indica si el Pokémon está quemado.</summary>
        </member>
        <member name="M:Poke.Clases.Pokemon.#ctor(System.String,System.Double,System.Double,System.String,Poke.Clases.Type.PokemonType,System.Collections.Generic.List{Poke.Clases.Attack})">
            <summary>
            Constructor para inicializar un Pokémon con su nombre, puntos de vida, capacidad de ataque, estado y tipo.
            </summary>
            <param name="name">Nombre del Pokémon.</param>
            <param name="health">Puntos de vida del Pokémon.</param>
            <param name="AttackCapacity">Capacidad de ataque del Pokémon.</param>
            <param name="state">Estado inicial del Pokémon.</param>
            <param name="type">Tipo del Pokémon.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.IsAlive">
            <summary>
            Verifica si el Pokémon está vivo.
            </summary>
            <returns>Mensaje indicando si el Pokémon está vivo o muerto.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.Attack(Poke.Clases.Pokemon,Poke.Clases.Pokemon,Poke.Clases.Attack)">
            <summary>
            Realiza un ataque contra otro Pokémon si tiene la capacidad para hacerlo.
            </summary>
            <param name="opponentPokemon">El Pokémon oponente a atacar.</param>
            <param name="playerPokemon">El Pokémon atacante.</param>
            <param name="attack">El ataque específico a usar.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.AddAttack(Poke.Clases.Attack)">
            <summary>
            Añade un ataque a la lista de ataques del Pokémon.
            </summary>
            <param name="nuevoAttack">El ataque a añadir.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.RecibeDamage(System.Double)">
            <summary>
            Aplica daño al Pokémon, reduciendo sus puntos de vida.
            </summary>
            <param name="damage">Cantidad de daño recibido.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.AddHP(System.Double)">
            <summary>
            Añade puntos de vida al Pokémon.
            </summary>
            <param name="hp">Cantidad de vida a añadir.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetAttacks">
            <summary>
            Obtiene la lista de ataques del Pokémon.
            </summary>
            <returns>Lista de ataques del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetType">
            <summary>
            Obtiene el tipo del Pokémon.
            </summary>
            <returns>Tipo del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.GetHp">
            <summary>
            Obtiene los puntos de vida del Pokémon.
            </summary>
            <returns>Puntos de vida del Pokémon.</returns>
        </member>
        <member name="M:Poke.Clases.Pokemon.ApplyState(Poke.Clases.Pokemon,System.String)">
            <summary>
            Aplica un estado al Pokémon objetivo si no tiene ya un estado aplicado.
            </summary>
            <param name="objective">El Pokémon al que se le aplica el estado.</param>
            <param name="state">El estado a aplicar.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.TotalCureWithItem(Poke.Clases.Pokemon,Poke.Clases.Item,Poke.Clases.OriginalTrainer)">
            <summary>
            Cura totalmente al Pokémon quitándole su estado cuando se usa el ítem "CuraTotal".
            </summary>
            <param name="objective">El Pokémon objetivo.</param>
            <param name="item">El ítem usado.</param>
            <param name="player">El entrenador que posee el ítem.</param>
        </member>
        <member name="M:Poke.Clases.Pokemon.StateActualization">
            <summary>
            Actualiza los efectos de los estados del Pokémon en cada turno.
            </summary>
        </member>
        <member name="T:Poke.Clases.Type">
            <summary>
            Clase estática que define los tipos de Pokémon y sus ventajas/desventajas de tipo.
            </summary>
        </member>
        <member name="T:Poke.Clases.Type.PokemonType">
            <summary>
            Enumera los tipos de Pokémon disponibles.
            </summary>
        </member>
        <member name="T:Poke.Clases.Type.TypeAdvantage">
            <summary>
            Define el tipo de ventaja en una batalla.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Advantage">
            <summary>
            Ventaja de tipo.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Neutral">
            <summary>
            Tipo neutral.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.TypeAdvantage.Disadvantage">
            <summary>
            Desventaja de tipo.
            </summary>
        </member>
        <member name="F:Poke.Clases.Type.typeAdvantages">
            <summary>
            Diccionario que contiene las combinaciones de tipos y sus respectivas ventajas.
            </summary>
        </member>
        <member name="M:Poke.Clases.Type.GetTypeAdvantage(Poke.Clases.Type.PokemonType,Poke.Clases.Type.PokemonType)">
            <summary>
            Obtiene la ventaja de tipo entre dos Pokémon.
            </summary>
            <param name="type1">Tipo del Pokémon atacante.</param>
            <param name="type2">Tipo del Pokémon defensor.</param>
            <returns>La ventaja de tipo entre los dos Pokémon (ventaja, neutral o desventaja).</returns>
        </member>
        <member name="T:Poke.Clases.Burned">
            <summary>
            Representa un ataque especial que puede causar el estado de "Quemado" en un Pokémon.
            </summary>
        </member>
        <member name="M:Poke.Clases.Burned.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Burned"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque según el tipo de Pokémon.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Burned.Burn(Poke.Clases.Pokemon)">
            <summary>
            Aplica el efecto de "Quemado" al Pokémon objetivo. 
            Este efecto reduce el HP del objetivo en un 10%.
            </summary>
            <param name="objective">El Pokémon objetivo que será afectado por el estado "Quemado".</param>
        </member>
        <member name="T:Poke.Clases.IsAsleep">
            <summary>
            Representa un ataque especial que puede causar el estado de "Dormido" en un Pokémon.
            </summary>
        </member>
        <member name="M:Poke.Clases.IsAsleep.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.IsAsleep"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque según el tipo de Pokémon.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.IsAsleep.Sleep(Poke.Clases.Pokemon)">
            <summary>
            Aplica el efecto de "Dormido" al Pokémon objetivo. 
            Este efecto impide que el Pokémon objetivo pueda atacar durante un número aleatorio de turnos (1 a 4).
            </summary>
            <param name="objective">El Pokémon objetivo que será afectado por el estado "Dormido".</param>
        </member>
        <member name="T:Poke.Clases.Paralized">
            <summary>
            Representa un ataque especial que puede causar el estado de "Paralizado" en un Pokémon.
            </summary>
        </member>
        <member name="M:Poke.Clases.Paralized.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Paralized"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque según el tipo de Pokémon.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Paralized.Paralize(Poke.Clases.Pokemon)">
            <summary>
            Aplica el efecto de "Paralizado" al Pokémon objetivo.
            Este estado puede impedir que el Pokémon ataque, dependiendo de un cálculo aleatorio.
            </summary>
            <param name="objective">El Pokémon objetivo que será afectado por el estado "Paralizado".</param>
        </member>
        <member name="T:Poke.Clases.Poisoned">
            <summary>
            Representa un ataque especial que puede causar el estado de "Envenenado" en un Pokémon.
            </summary>
        </member>
        <member name="M:Poke.Clases.Poisoned.#ctor(System.String,System.Double,Poke.Clases.Type.PokemonType,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Poke.Clases.Poisoned"/>.
            </summary>
            <param name="name">Nombre del ataque.</param>
            <param name="damage">Daño base del ataque.</param>
            <param name="attackType">Tipo del ataque según el tipo de Pokémon.</param>
            <param name="isSpecial">Indica si el ataque es especial.</param>
        </member>
        <member name="M:Poke.Clases.Poisoned.Envenenar(Poke.Clases.Pokemon)">
            <summary>
            Aplica el efecto de "Envenenado" al Pokémon objetivo.
            Este estado reduce un porcentaje de la salud del Pokémon objetivo en cada turno.
            </summary>
            <param name="objective">El Pokémon objetivo que será afectado por el estado "Envenenado".</param>
        </member>
    </members>
</doc>
